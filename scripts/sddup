#!/bin/bash
#
# SD Duplicator
#
# Copies image on a master SD Card to many destination SD cards.  Verifies
# cards after copy.
#
# USB Ports MUST be connected in the following positions (shown looking into ports)
#   -------------------------------------------------------------------------------------
#   |              |   2: USB DRIVE w/IMG (MASTER) |   4: USB 7-PORT POWERED HUB (TOP)  |
#   |   ETHERNET   |-------------------------------|------------------------------------|
#   |              |   3: KEYBOARD & MOUSE (OPT)   |   5: USB 7-PORT POWERED HUB (BOT)  |
#   -------------------------------------------------------------------------------------
#
# - USB Hubs should have an SD card in SD card readers in each port, for each
#   duplication to be made.
# - Master SD Card should be in the port shown in the table above.
# - The number "N:" above shows the USB port number as defined by sysfs
#
to_port()
{
    case `cut -d: -f2 <<< $1` in
        1.2)     echo "master";;
        1.4.4)   echo "top hub, port 1";;
        1.4.3)   echo "top hub, port 2";;
        1.4.2)   echo "top hub, port 3";;
        1.4.5.5) echo "top hub, port 4";;
        1.4.5.2) echo "top hub, port 5";;
        1.4.5.3) echo "top hub, port 6";;
        1.4.5.4) echo "top hub, port 7";;
        1.5.4)   echo "bottom hub, port 1";;
        1.5.3)   echo "bottom hub, port 2";;
        1.5.2)   echo "bottom hub, port 3";;
        1.5.5.5) echo "bottom hub, port 4";;
        1.5.5.2) echo "bottom hub, port 5";;
        1.5.5.3) echo "bottom hub, port 6";;
        1.5.5.4) echo "bottom hub, port 7";;
    esac
}

#
# For debugging:
#COUNT=count=2

if [ $(id -u) -ne 0 ]; then
    echo "Must run as root"
    exit 1
fi

VERIFY_ONLY=
if [ -n "$1" ]; then
    if [ "$1" == "ver" ]; then
        VERIFY_ONLY=1
    else
        echo "Invalid first argument"
        exit 1
    fi
fi

echo "SD Duplicator..."

#
# SRCS are all potential mounatble device partitions on usb ports 2 & 3 (see
# header at top).
# DESTS are all potential devices on usb ports 4 & 5 (see header at top).
#
SRCS=/dev/disk/by-path/platform-*usb-usb-0:1.[23]:1.0-scsi-0:0:0:0-part?
DESTS=/dev/disk/by-path/platform-*usb-usb-0\:1.[45].*:0

#
# Search for image file on any SRCS partitions, by mounting each in turn.
# First one found will be used.  If either image file or associated md5 file
# are not found, error out.
#
umount /dev/sd?? 2>/dev/null
M=/tmp/mount
IMG=$M/sdcard.img
MD5_FILE=$M/sdcard.md5
mkdir -p $M
umount $M 2>/dev/null
echo "Searching sources for SD card image:"
for src in $SRCS; do
    echo "    Device: $src"
    mount $src $M
    [ -f $IMG ] && break
    umount $M 2>/dev/null
done
if [ ! -f $IMG ]; then
    echo "ERROR: Source image file ($(basename $IMG)) not found"
    exit 1
fi
if [ ! -f $MD5_FILE ]; then
    echo "ERROR: Source md5 file ($(basename $MD5_FILE)) not found"
    exit 1
fi
MASTER_MD5="`cat $MD5_FILE`"
echo "Found source SD card image"

#
# Search all destinations devices for cards with readers.  Each destination
# card reader found (with an SD card) should have the same exact block size as
# the image file.
#
NUM_CARD_READERS=`echo $DESTS | wc -w`
echo "Found $NUM_CARD_READERS destination SD card readers:"
ERR=""
IMG_BLKSIZE=$(stat --format %b $IMG)
for dest in $DESTS; do
    DEST_BLKSIZE=$(blockdev --getsz $dest 2>/dev/null)
    if [ -n "$DEST_BLKSIZE" ]; then
        if [ "$DEST_BLKSIZE" != "$IMG_BLKSIZE" ]; then
            echo "ERROR: Destination SD card ($(to_port $dest)) different size than source"
            exit 1
        fi
        DESTS_WITH_SDCARD="$DESTS_WITH_SDCARD $dest"
    fi
done
for dest in $DESTS; do
    DEST_BLKSIZE=$(blockdev --getsz $dest 2>/dev/null)
    if [ -z "$DEST_BLKSIZE" ]; then
        echo "    Reader in $(to_port $dest) (but WITHOUT SD card!)"
    else
        echo "    Reader in $(to_port $dest)"
    fi
done | sort
NUM_CARDS=`echo $DESTS_WITH_SDCARD | wc -w`
if [ $NUM_CARDS -eq 0 ]; then
    echo "ERROR: No destination SD cards found"
    exit 1
fi
if [ $NUM_CARDS != $NUM_CARD_READERS ]; then
    echo "Using only above $NUM_CARDS readers WITH SD cards"
fi
DESTS="$DESTS_WITH_SDCARD"
read -p "Press enter to continue"

start_dup()
{
    pids=
    for dest in $DESTS; do
        dd bs=1M if=$IMG of=$dest $COUNT &
        pids+="$! "
    done
}

#
# Vefification saves the md5sum of each sdcard to a file in a temp directory.
# The filename is the human-readable port name of the device (via function
# to_port())
#
start_verification()
{
    rm -rf sddup.tmp
    mkdir -p sddup.tmp

    pids=
    for dest in $DESTS; do
        dd bs=1M if=$dest $COUNT | md5sum | cut -d" " -f1 > "sddup.tmp/`to_port $dest`" &
        pids+="$! "
    done
}

wait_pids()
{
    for p in $pids; do
        wait $p
    done
}

START=$(date +%s)
if [ ! -n "$VERIFY_ONLY" ]; then
    echo
    echo "########################################################################"
    echo "# Starting duplication..."
    echo "# ...to see progress, in another shell run 'sudo killall -USR1 dd'"
    echo "#"

    start_dup
    wait_pids
fi

echo
echo "########################################################################"
echo "# Duplication done.  Verifying"
echo "# ...to see progress, in another shell run 'sudo killall -USR1 dd'"
echo "#"

start_verification
wait_pids

END=$(date +%s)
TOTAL_SECONDS=$((END-START))
HOURS=$((TOTAL_SECONDS/3600))
HOURS_REMAINDER=$((TOTAL_SECONDS%3600))
MINUTES=$((HOURS_REMAINDER/60))
SECONDS=$((HOURS_REMAINDER%60))

echo
echo "########################################################################"
echo "# Verification output:"
echo "#"

#
# 
echo "master: $MASTER_MD5"
echo
TOTAL=0
PASS=0
FAIL=0
for card in sddup.tmp/*; do
    md5=`cat "$card"`
    name=`basename "$card"`
    if [ "$md5" == "$MASTER_MD5" ]; then
        verification="verified"
        PASS=$((PASS+1))
    else
        verification="##### VERIFICATION FAILED #####"
        FAIL=$((FAIL+1))
    fi
    TOTAL=$((TOTAL+1))
    printf "%20s   %s    %s\n" "$name" "$md5" "$verification"
done
echo

if [ "$TOTAL" != "$NUM_CARDS" ]; then
    echo "##### ERROR: Total ($TOTAL) does not equal original num cards ($NUM_CARDS)"
elif [ "$FAIL" != 0 ]; then
    echo "##### WARNING: FAILED verification of $FAIL/$TOTAL cards"
    echo "----- INFO: Remove offending card, and then run:"
    echo "----- INFO:       sudo ./sddup ver"
    echo "----- INFO: ...to verify only"
else
    # Note: %s needed, because format string can't start with "--"
    printf "%s----- INFO: All $TOTAL cards passed verification (time %02d:%02d:%02d)\n" "" \
        $HOURS $MINUTES $SECONDS
fi

rm -rf sddup.tmp

echo

